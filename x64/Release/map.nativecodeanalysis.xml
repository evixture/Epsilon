<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\console\</FILEPATH>
      <FILENAME>console.h</FILENAME>
      <LINE>122</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>TCOD_Console::end</FUNCTION>
    <DECORATED>?end@TCOD_Console@@QEAAPEAUTCOD_ConsoleTile@@XZ</DECORATED>
    <FUNCLINE>120</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\console\</FILEPATH>
      <FILENAME>console.h</FILENAME>
      <LINE>126</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>TCOD_Console::end</FUNCTION>
    <DECORATED>?end@TCOD_Console@@QEBAPEBUTCOD_ConsoleTile@@XZ</DECORATED>
    <FUNCLINE>124</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>tileset.h</FILENAME>
      <LINE>52</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'tcod::tileset::Tileset::tiles_last_known_capacity' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::Tileset::{ctor}</FUNCTION>
    <DECORATED>??0Tileset@tileset@tcod@@QEAA@HH@Z</DECORATED>
    <FUNCLINE>52</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>tcod::tileset::Tileset::tiles_last_known_capacity</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>tileset.h</FILENAME>
      <LINE>78</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>tcod::tileset::Tileset::set_tile</FUNCTION>
    <DECORATED>?set_tile@Tileset@tileset@tcod@@QEAAHAEBVTile@23@@Z</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>observer.h</FILENAME>
      <LINE>62</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::TilesetObserver::{ctor}</FUNCTION>
    <DECORATED>??0TilesetObserver@tileset@tcod@@QEAA@$$QEAV012@@Z</DECORATED>
    <FUNCLINE>62</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>observer.h</FILENAME>
      <LINE>65</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::TilesetObserver::=</FUNCTION>
    <DECORATED>??4TilesetObserver@tileset@tcod@@QEAAAEAV012@$$QEAV012@@Z</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>mersenne.hpp</FILENAME>
      <LINE>222</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'TCOD_distribution_t' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>TCODRandom::setDistribution</FUNCTION>
    <DECORATED>?setDistribution@TCODRandom@@QEAAXW4TCOD_distribution_t@@@Z</DECORATED>
    <FUNCLINE>222</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::position' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::position</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::x' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::x</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::horizontal' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::horizontal</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::h' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::h</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::y' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::y</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::w' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::w</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>78</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::position' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@HHHH@Z</DECORATED>
    <FUNCLINE>78</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::position</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>78</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::horizontal' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@HHHH@Z</DECORATED>
    <FUNCLINE>78</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::horizontal</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>utility.h</FILENAME>
      <LINE>9</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Position::y' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Position::{ctor}</FUNCTION>
    <DECORATED>??0Position@@QEAA@XZ</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Position::y</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>utility.h</FILENAME>
      <LINE>9</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Position::x' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Position::{ctor}</FUNCTION>
    <DECORATED>??0Position@@QEAA@XZ</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Position::x</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>utility.h</FILENAME>
      <LINE>9</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Position::level' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Position::{ctor}</FUNCTION>
    <DECORATED>??0Position@@QEAA@XZ</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Position::level</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>26</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>35</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>166</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'Firearm::FireType' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>World::{ctor}</FUNCTION>
    <DECORATED>??0World@@QEAA@XZ</DECORATED>
    <FUNCLINE>156</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>190</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTile</FUNCTION>
    <DECORATED>?getTile@World@@QEBA?AV?$shared_ptr@UTile@@@std@@UPosition@@@Z</DECORATED>
    <FUNCLINE>186</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>200</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::isExplored</FUNCTION>
    <DECORATED>?isExplored@World@@QEBA_NUPosition@@@Z</DECORATED>
    <FUNCLINE>198</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>205</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getBgColor</FUNCTION>
    <DECORATED>?getBgColor@World@@QEBA?AVTCODColor@@UPosition@@@Z</DECORATED>
    <FUNCLINE>203</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>258</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getWalkability</FUNCTION>
    <DECORATED>?getWalkability@World@@QEBA_NUPosition@@@Z</DECORATED>
    <FUNCLINE>251</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>263</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NUPosition@@H@Z</DECORATED>
    <FUNCLINE>261</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>265</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NUPosition@@H@Z</DECORATED>
    <FUNCLINE>261</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>267</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NUPosition@@H@Z</DECORATED>
    <FUNCLINE>261</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>267</LINE>
      <COLUMN>168</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NUPosition@@H@Z</DECORATED>
    <FUNCLINE>261</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>273</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NUPosition@@H@Z</DECORATED>
    <FUNCLINE>261</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>305</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::isInFov</FUNCTION>
    <DECORATED>?isInFov@World@@QEBA_NUPosition@@@Z</DECORATED>
    <FUNCLINE>297</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>