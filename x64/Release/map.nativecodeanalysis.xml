<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\console\</FILEPATH>
      <FILENAME>console.h</FILENAME>
      <LINE>122</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>TCOD_Console::end</FUNCTION>
    <DECORATED>?end@TCOD_Console@@QEAAPEAUTCOD_ConsoleTile@@XZ</DECORATED>
    <FUNCLINE>120</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\console\</FILEPATH>
      <FILENAME>console.h</FILENAME>
      <LINE>126</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>TCOD_Console::end</FUNCTION>
    <DECORATED>?end@TCOD_Console@@QEBAPEBUTCOD_ConsoleTile@@XZ</DECORATED>
    <FUNCLINE>124</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\tileset\</FILEPATH>
      <FILENAME>tileset.h</FILENAME>
      <LINE>52</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'tcod::tileset::Tileset::tiles_last_known_capacity' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::Tileset::{ctor}</FUNCTION>
    <DECORATED>??0Tileset@tileset@tcod@@QEAA@HH@Z</DECORATED>
    <FUNCLINE>52</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>tcod::tileset::Tileset::tiles_last_known_capacity</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\tileset\</FILEPATH>
      <FILENAME>tileset.h</FILENAME>
      <LINE>78</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>tcod::tileset::Tileset::set_tile</FUNCTION>
    <DECORATED>?set_tile@Tileset@tileset@tcod@@QEAAHAEBVTile@23@@Z</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\tileset\</FILEPATH>
      <FILENAME>observer.h</FILENAME>
      <LINE>63</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::TilesetObserver::{ctor}</FUNCTION>
    <DECORATED>??0TilesetObserver@tileset@tcod@@QEAA@$$QEAV012@@Z</DECORATED>
    <FUNCLINE>63</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\tileset\</FILEPATH>
      <FILENAME>observer.h</FILENAME>
      <LINE>66</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::TilesetObserver::=</FUNCTION>
    <DECORATED>??4TilesetObserver@tileset@tcod@@QEAAAEAV012@$$QEAV012@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::y' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::y</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::w' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::w</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::position' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::position</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::x' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::x</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::horizontal' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::horizontal</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::h' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::h</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>78</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::position' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@HHHH@Z</DECORATED>
    <FUNCLINE>78</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::position</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\libtcod-1.12.3-x86_64-msvc\include\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>78</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::horizontal' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@HHHH@Z</DECORATED>
    <FUNCLINE>78</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::horizontal</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>26</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@@QEAA@PEBD@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Map::mapH' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@@QEAA@PEBD@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Map::mapH</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Map::mapW' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@@QEAA@PEBD@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Map::mapW</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Map::mapName' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@@QEAA@PEBD@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Map::mapName</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Map::totalFloors' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@@QEAA@PEBD@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Map::totalFloors</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>84</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::isExplored</FUNCTION>
    <DECORATED>?isExplored@World@@QEAA_NHHH@Z</DECORATED>
    <FUNCLINE>82</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>89</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getBgColor</FUNCTION>
    <DECORATED>?getBgColor@World@@QEAA?AVTCODColor@@HHH@Z</DECORATED>
    <FUNCLINE>87</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>94</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getFgColor</FUNCTION>
    <DECORATED>?getFgColor@World@@QEAA?AVTCODColor@@HHH@Z</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>99</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getCh</FUNCTION>
    <DECORATED>?getCh@World@@QEAAHHHH@Z</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>104</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getHeight</FUNCTION>
    <DECORATED>?getHeight@World@@QEAAHHHH@Z</DECORATED>
    <FUNCLINE>102</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>114</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getWalkability</FUNCTION>
    <DECORATED>?getWalkability@World@@QEAA_NHHH@Z</DECORATED>
    <FUNCLINE>107</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>119</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEAA_NHHHH@Z</DECORATED>
    <FUNCLINE>117</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>125</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEAA_NHHHH@Z</DECORATED>
    <FUNCLINE>117</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>156</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::isInFov</FUNCTION>
    <DECORATED>?isInFov@World@@QEAA_NHHH@Z</DECORATED>
    <FUNCLINE>148</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>