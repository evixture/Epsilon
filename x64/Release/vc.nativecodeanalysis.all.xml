<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>1096</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::xml_attribute_struct::header' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::xml_attribute_struct::{ctor}</FUNCTION>
    <DECORATED>??0xml_attribute_struct@pugi@@QEAA@PEAUxml_memory_page@?A0x186f9f63@impl@1@@Z</DECORATED>
    <FUNCLINE>1096</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::xml_attribute_struct::header</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>1112</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::xml_node_struct::header' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::xml_node_struct::{ctor}</FUNCTION>
    <DECORATED>??0xml_node_struct@pugi@@QEAA@PEAUxml_memory_page@?A0x186f9f63@impl@1@W4xml_node_type@1@@Z</DECORATED>
    <FUNCLINE>1112</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::xml_node_struct::header</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>3698</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::impl::`anonymous-namespace'::xml_buffered_writer::scratch' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::xml_buffered_writer::{ctor}</FUNCTION>
    <DECORATED>??0xml_buffered_writer@?A0x186f9f63@impl@pugi@@QEAA@AEAVxml_writer@3@W4xml_encoding@3@@Z</DECORATED>
    <FUNCLINE>3698</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::impl::`anonymous-namespace'::xml_buffered_writer::scratch</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>4466</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>28182</DEFECTCODE>
    <DESCRIPTION>Dereferencing NULL pointer. 'dit' contains the same NULL value as 'copy' did. </DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::node_copy_tree</FUNCTION>
    <DECORATED>?node_copy_tree@?A0x186f9f63@impl@pugi@@YAXPEAUxml_node_struct@3@0@Z</DECORATED>
    <FUNCLINE>4426</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4428</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4429</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4431</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4433</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4434</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4436</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4439</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4441</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4443</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4445</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4447</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4449</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4450</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4436</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4439</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4441</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4443</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'dit' may be NULL (Skip this branch)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4459</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>Skip this branch, (assume 'sit-&gt;next_sibling' is false)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4465</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
        <FILENAME>pugixml.cpp</FILENAME>
        <LINE>4466</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>usage</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'dit' is dereferenced, but may still be NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>8551</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::translate_table</FUNCTION>
    <DECORATED>?translate_table@?A0x186f9f63@impl@pugi@@YAPEADPEADPEBE@Z</DECORATED>
    <FUNCLINE>8535</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>8572</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::impl::`anonymous-namespace'::xpath_variable_boolean::name' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::xpath_variable_boolean::{ctor}</FUNCTION>
    <DECORATED>??0xpath_variable_boolean@?A0x186f9f63@impl@pugi@@QEAA@XZ</DECORATED>
    <FUNCLINE>8572</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::impl::`anonymous-namespace'::xpath_variable_boolean::name</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>8582</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::impl::`anonymous-namespace'::xpath_variable_number::name' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::xpath_variable_number::{ctor}</FUNCTION>
    <DECORATED>??0xpath_variable_number@?A0x186f9f63@impl@pugi@@QEAA@XZ</DECORATED>
    <FUNCLINE>8582</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::impl::`anonymous-namespace'::xpath_variable_number::name</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>8592</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::impl::`anonymous-namespace'::xpath_variable_string::name' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::xpath_variable_string::{ctor}</FUNCTION>
    <DECORATED>??0xpath_variable_string@?A0x186f9f63@impl@pugi@@QEAA@XZ</DECORATED>
    <FUNCLINE>8592</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::impl::`anonymous-namespace'::xpath_variable_string::name</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>8607</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::impl::`anonymous-namespace'::xpath_variable_node_set::name' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::xpath_variable_node_set::{ctor}</FUNCTION>
    <DECORATED>??0xpath_variable_node_set@?A0x186f9f63@impl@pugi@@QEAA@XZ</DECORATED>
    <FUNCLINE>8607</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::impl::`anonymous-namespace'::xpath_variable_node_set::name</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>10221</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::impl::`anonymous-namespace'::xpath_ast_node::_data' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::xpath_ast_node::{ctor}</FUNCTION>
    <DECORATED>??0xpath_ast_node@?A0x186f9f63@impl@pugi@@QEAA@W4ast_type_t@123@W4xpath_value_type@3@PEAV0123@2@Z</DECORATED>
    <FUNCLINE>10221</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::impl::`anonymous-namespace'::xpath_ast_node::_data</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>10233</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::impl::`anonymous-namespace'::xpath_ast_node::_data' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::xpath_ast_node::{ctor}</FUNCTION>
    <DECORATED>??0xpath_ast_node@?A0x186f9f63@impl@pugi@@QEAA@W4ast_type_t@123@PEAV0123@1W4predicate_t@123@@Z</DECORATED>
    <FUNCLINE>10233</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::impl::`anonymous-namespace'::xpath_ast_node::_data</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>11935</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::impl::`anonymous-namespace'::xpath_parser::_scratch' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::xpath_parser::{ctor}</FUNCTION>
    <DECORATED>??0xpath_parser@?A0x186f9f63@impl@pugi@@QEAA@PEBDPEAVxpath_variable_set@3@PEAUxpath_allocator@123@PEAUxpath_parse_result@3@@Z</DECORATED>
    <FUNCLINE>11935</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::impl::`anonymous-namespace'::xpath_parser::_scratch</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>12337</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::xpath_variable_set::_data' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::xpath_variable_set::{ctor}</FUNCTION>
    <DECORATED>??0xpath_variable_set@pugi@@QEAA@XZ</DECORATED>
    <FUNCLINE>12337</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::xpath_variable_set::_data</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>12367</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::xpath_variable_set::_data' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::xpath_variable_set::{ctor}</FUNCTION>
    <DECORATED>??0xpath_variable_set@pugi@@QEAA@$$QEAV01@@Z</DECORATED>
    <FUNCLINE>12367</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::xpath_variable_set::_data</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>4516</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::string_to_integer</FUNCTION>
    <DECORATED>??$string_to_integer@_K@?A0x186f9f63@impl@pugi@@YA_KPEBD_K1@Z</DECORATED>
    <FUNCLINE>4489</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>4518</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::string_to_integer</FUNCTION>
    <DECORATED>??$string_to_integer@_K@?A0x186f9f63@impl@pugi@@YA_KPEBD_K1@Z</DECORATED>
    <FUNCLINE>4489</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>4518</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::string_to_integer</FUNCTION>
    <DECORATED>??$string_to_integer@_K@?A0x186f9f63@impl@pugi@@YA_KPEBD_K1@Z</DECORATED>
    <FUNCLINE>4489</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>4540</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::string_to_integer</FUNCTION>
    <DECORATED>??$string_to_integer@_K@?A0x186f9f63@impl@pugi@@YA_KPEBD_K1@Z</DECORATED>
    <FUNCLINE>4489</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\pugixml-1.10\src\</FILEPATH>
      <FILENAME>pugixml.cpp</FILENAME>
      <LINE>4847</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'pugi::impl::`anonymous-namespace'::xml_stream_chunk&lt;wchar_t&gt;::data' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>pugi::impl::`anonymous-namespace'::xml_stream_chunk&lt;wchar_t&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$xml_stream_chunk@_W@?A0x186f9f63@impl@pugi@@QEAA@XZ</DECORATED>
    <FUNCLINE>4847</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>pugi::impl::`anonymous-namespace'::xml_stream_chunk&lt;wchar_t&gt;::data</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\console\</FILEPATH>
      <FILENAME>console.h</FILENAME>
      <LINE>122</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>TCOD_Console::end</FUNCTION>
    <DECORATED>?end@TCOD_Console@@QEAAPEAUTCOD_ConsoleTile@@XZ</DECORATED>
    <FUNCLINE>120</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\console\</FILEPATH>
      <FILENAME>console.h</FILENAME>
      <LINE>126</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>TCOD_Console::end</FUNCTION>
    <DECORATED>?end@TCOD_Console@@QEBAPEBUTCOD_ConsoleTile@@XZ</DECORATED>
    <FUNCLINE>124</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>tileset.h</FILENAME>
      <LINE>52</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'tcod::tileset::Tileset::tiles_last_known_capacity' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::Tileset::{ctor}</FUNCTION>
    <DECORATED>??0Tileset@tileset@tcod@@QEAA@HH@Z</DECORATED>
    <FUNCLINE>52</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>tcod::tileset::Tileset::tiles_last_known_capacity</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>tileset.h</FILENAME>
      <LINE>78</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>tcod::tileset::Tileset::set_tile</FUNCTION>
    <DECORATED>?set_tile@Tileset@tileset@tcod@@QEAAHAEBVTile@23@@Z</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::w' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::w</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>78</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::position' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@HHHH@Z</DECORATED>
    <FUNCLINE>78</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::position</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>utility.h</FILENAME>
      <LINE>18</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Position3::y' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Position3::{ctor}</FUNCTION>
    <DECORATED>??0Position3@@QEAA@XZ</DECORATED>
    <FUNCLINE>18</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Position3::y</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>utility.h</FILENAME>
      <LINE>28</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Position4::height' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Position4::{ctor}</FUNCTION>
    <DECORATED>??0Position4@@QEAA@XZ</DECORATED>
    <FUNCLINE>28</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Position4::height</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>input.h</FILENAME>
      <LINE>21</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'KeyboardButton::button' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>KeyboardButton::{ctor}</FUNCTION>
    <DECORATED>??0KeyboardButton@@QEAA@XZ</DECORATED>
    <FUNCLINE>21</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>KeyboardButton::button</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>input.h</FILENAME>
      <LINE>31</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'MouseButton::button' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>MouseButton::{ctor}</FUNCTION>
    <DECORATED>??0MouseButton@@QEAA@XZ</DECORATED>
    <FUNCLINE>31</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>MouseButton::button</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>entity.cpp</FILENAME>
      <LINE>213</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Player::moveSelectorUp</FUNCTION>
    <DECORATED>?moveSelectorUp@Player@@AEAAXXZ</DECORATED>
    <FUNCLINE>195</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>entity.cpp</FILENAME>
      <LINE>225</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Player::moveSelectorDown</FUNCTION>
    <DECORATED>?moveSelectorDown@Player@@AEAAXXZ</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>entity.cpp</FILENAME>
      <LINE>229</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Player::moveSelectorDown</FUNCTION>
    <DECORATED>?moveSelectorDown@Player@@AEAAXXZ</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>entity.cpp</FILENAME>
      <LINE>238</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Player::moveSelectorDown</FUNCTION>
    <DECORATED>?moveSelectorDown@Player@@AEAAXXZ</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>entity.cpp</FILENAME>
      <LINE>354</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Player::filterIndexes</FUNCTION>
    <DECORATED>?filterIndexes@Player@@AEAAXXZ</DECORATED>
    <FUNCLINE>345</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>entity.cpp</FILENAME>
      <LINE>367</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Player::filterIndexes</FUNCTION>
    <DECORATED>?filterIndexes@Player@@AEAAXXZ</DECORATED>
    <FUNCLINE>345</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>item.cpp</FILENAME>
      <LINE>51</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ActionManager::moveSelectorDown</FUNCTION>
    <DECORATED>?moveSelectorDown@ActionManager@@QEAAXXZ</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>168</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Map::createBlockMap</FUNCTION>
    <DECORATED>?createBlockMap@Map@@AEAA_NAEAVxml_node@pugi@@@Z</DECORATED>
    <FUNCLINE>160</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>182</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Map::createBlockMap</FUNCTION>
    <DECORATED>?createBlockMap@Map@@AEAA_NAEAVxml_node@pugi@@@Z</DECORATED>
    <FUNCLINE>160</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>189</LINE>
      <COLUMN>84</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Map::createBlockMap</FUNCTION>
    <DECORATED>?createBlockMap@Map@@AEAA_NAEAVxml_node@pugi@@@Z</DECORATED>
    <FUNCLINE>160</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>510</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Map::getBlock</FUNCTION>
    <DECORATED>?getBlock@Map@@QEBA?AV?$shared_ptr@UBlock@@@std@@UPosition3@@@Z</DECORATED>
    <FUNCLINE>506</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>520</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::isExplored</FUNCTION>
    <DECORATED>?isExplored@World@@QEBA_NAEAUPosition3@@@Z</DECORATED>
    <FUNCLINE>518</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>537</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getBgColor</FUNCTION>
    <DECORATED>?getBgColor@World@@QEBA?AVTCODColor@@AEAUPosition3@@@Z</DECORATED>
    <FUNCLINE>535</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>662</LINE>
      <COLUMN>89</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::isInPlayerFov</FUNCTION>
    <DECORATED>?isInPlayerFov@World@@QEBA_NUPosition4@@@Z</DECORATED>
    <FUNCLINE>653</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>panel.cpp</FILENAME>
      <LINE>261</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>SplashWindow::update</FUNCTION>
    <DECORATED>?update@SplashWindow@@UEAAXXZ</DECORATED>
    <FUNCLINE>246</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>panel.cpp</FILENAME>
      <LINE>321</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>SplashWindow::render</FUNCTION>
    <DECORATED>?render@SplashWindow@@UEBAXXZ</DECORATED>
    <FUNCLINE>306</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>tile.cpp</FILENAME>
      <LINE>9</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Block::destroyed' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Block::{ctor}</FUNCTION>
    <DECORATED>??0Block@@QEAA@V?$vector@UTile@@V?$allocator@UTile@@@std@@@std@@EE@Z</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Block::destroyed</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>tile.cpp</FILENAME>
      <LINE>13</LINE>
      <COLUMN>7</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Block::destroyed' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Block::{ctor}</FUNCTION>
    <DECORATED>??0Block@@QEAA@V?$vector@UTile@@V?$allocator@UTile@@@std@@@std@@EEW4Tag@0@@Z</DECORATED>
    <FUNCLINE>13</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Block::destroyed</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>tile.cpp</FILENAME>
      <LINE>25</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Block::getTileData</FUNCTION>
    <DECORATED>?getTileData@Block@@QEBA?AUTile@@H@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>tool.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Tool::angle' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Tool::{ctor}</FUNCTION>
    <DECORATED>??0Tool@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VTCODColor@@H@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Tool::angle</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>tool.cpp</FILENAME>
      <LINE>7</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Tool::angle' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Tool::{ctor}</FUNCTION>
    <DECORATED>??0Tool@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VTCODColor@@W4AmmoType@MagazineData@@W4FireType@0@D@Z</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Tool::angle</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>tool.cpp</FILENAME>
      <LINE>654</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Firearm::update</FUNCTION>
    <DECORATED>?update@Firearm@@UEAAXAEAUPosition4@@AEAH1AEA_N@Z</DECORATED>
    <FUNCLINE>630</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>utility.cpp</FILENAME>
      <LINE>135</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>getAngle</FUNCTION>
    <DECORATED>?getAngle@@YANHHHH@Z</DECORATED>
    <FUNCLINE>133</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>utility.cpp</FILENAME>
      <LINE>135</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>getAngle</FUNCTION>
    <DECORATED>?getAngle@@YANHHHH@Z</DECORATED>
    <FUNCLINE>133</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>