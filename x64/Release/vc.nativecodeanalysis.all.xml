<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\console\</FILEPATH>
      <FILENAME>console.h</FILENAME>
      <LINE>122</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>TCOD_Console::end</FUNCTION>
    <DECORATED>?end@TCOD_Console@@QEAAPEAUTCOD_ConsoleTile@@XZ</DECORATED>
    <FUNCLINE>120</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\console\</FILEPATH>
      <FILENAME>console.h</FILENAME>
      <LINE>126</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>TCOD_Console::end</FUNCTION>
    <DECORATED>?end@TCOD_Console@@QEBAPEBUTCOD_ConsoleTile@@XZ</DECORATED>
    <FUNCLINE>124</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>tileset.h</FILENAME>
      <LINE>52</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'tcod::tileset::Tileset::tiles_last_known_capacity' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::Tileset::{ctor}</FUNCTION>
    <DECORATED>??0Tileset@tileset@tcod@@QEAA@HH@Z</DECORATED>
    <FUNCLINE>52</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>tcod::tileset::Tileset::tiles_last_known_capacity</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>tileset.h</FILENAME>
      <LINE>78</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>tcod::tileset::Tileset::set_tile</FUNCTION>
    <DECORATED>?set_tile@Tileset@tileset@tcod@@QEAAHAEBVTile@23@@Z</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>observer.h</FILENAME>
      <LINE>62</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::TilesetObserver::{ctor}</FUNCTION>
    <DECORATED>??0TilesetObserver@tileset@tcod@@QEAA@$$QEAV012@@Z</DECORATED>
    <FUNCLINE>62</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\tileset\</FILEPATH>
      <FILENAME>observer.h</FILENAME>
      <LINE>65</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>tcod::tileset::TilesetObserver::=</FUNCTION>
    <DECORATED>??4TilesetObserver@tileset@tcod@@QEAAAEAV012@$$QEAV012@@Z</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>mersenne.hpp</FILENAME>
      <LINE>222</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'TCOD_distribution_t' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>TCODRandom::setDistribution</FUNCTION>
    <DECORATED>?setDistribution@TCODRandom@@QEAAXW4TCOD_distribution_t@@@Z</DECORATED>
    <FUNCLINE>222</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::w' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@XZ</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::w</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Libtcod\custom-libtcod-master\src\libtcod\</FILEPATH>
      <FILENAME>bsp.hpp</FILENAME>
      <LINE>78</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'TCODBsp::position' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>TCODBsp::{ctor}</FUNCTION>
    <DECORATED>??0TCODBsp@@QEAA@HHHH@Z</DECORATED>
    <FUNCLINE>78</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>TCODBsp::position</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>engine.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'Engine::Gamestate' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>Engine::{ctor}</FUNCTION>
    <DECORATED>??0Engine@@QEAA@HH@Z</DECORATED>
    <FUNCLINE>4</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>entity.cpp</FILENAME>
      <LINE>189</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Player::update</FUNCTION>
    <DECORATED>?update@Player@@UEAAXXZ</DECORATED>
    <FUNCLINE>56</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>entity.cpp</FILENAME>
      <LINE>203</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Player::update</FUNCTION>
    <DECORATED>?update@Player@@UEAAXXZ</DECORATED>
    <FUNCLINE>56</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>gui.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'Gui::ActiveWindow' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>Gui::{ctor}</FUNCTION>
    <DECORATED>??0Gui@@QEAA@HH@Z</DECORATED>
    <FUNCLINE>4</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>input.cpp</FILENAME>
      <LINE>4</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'sf::Keyboard::Key' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>Key::{ctor}</FUNCTION>
    <DECORATED>??0Key@@QEAA@W40Keyboard@sf@@@Z</DECORATED>
    <FUNCLINE>4</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>input.cpp</FILENAME>
      <LINE>8</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Key::keySwitch' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Key::{ctor}</FUNCTION>
    <DECORATED>??0Key@@QEAA@XZ</DECORATED>
    <FUNCLINE>8</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Key::keySwitch</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>input.cpp</FILENAME>
      <LINE>39</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'TCOD_event_t' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>Input::{ctor}</FUNCTION>
    <DECORATED>??0Input@@QEAA@XZ</DECORATED>
    <FUNCLINE>36</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>input.cpp</FILENAME>
      <LINE>273</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'Engine::Gamestate' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>Input::getKeyInput</FUNCTION>
    <DECORATED>?getKeyInput@Input@@QEAAXV?$shared_ptr@VPlayer@@@std@@@Z</DECORATED>
    <FUNCLINE>216</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>30</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@@QEAA@PEBD@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Map::mapHeight' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Map::{ctor}</FUNCTION>
    <DECORATED>??0Map@@QEAA@PEBD@Z</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>Map::mapHeight</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>166</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTile</FUNCTION>
    <DECORATED>?getTile@World@@QEBA?AV?$shared_ptr@UTile@@@std@@HHH@Z</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>179</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::isExplored</FUNCTION>
    <DECORATED>?isExplored@World@@QEBA_NHHH@Z</DECORATED>
    <FUNCLINE>174</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>184</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getBgColor</FUNCTION>
    <DECORATED>?getBgColor@World@@QEBA?AVTCODColor@@HHH@Z</DECORATED>
    <FUNCLINE>182</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>222</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getWalkability</FUNCTION>
    <DECORATED>?getWalkability@World@@QEBA_NHHH@Z</DECORATED>
    <FUNCLINE>215</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>227</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NHHHH@Z</DECORATED>
    <FUNCLINE>225</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>229</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NHHHH@Z</DECORATED>
    <FUNCLINE>225</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>231</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NHHHH@Z</DECORATED>
    <FUNCLINE>225</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>231</LINE>
      <COLUMN>117</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NHHHH@Z</DECORATED>
    <FUNCLINE>225</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>237</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::getTransparency</FUNCTION>
    <DECORATED>?getTransparency@World@@QEBA_NHHHH@Z</DECORATED>
    <FUNCLINE>225</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>map.cpp</FILENAME>
      <LINE>272</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>World::isInFov</FUNCTION>
    <DECORATED>?isInFov@World@@QEBA_NHHH@Z</DECORATED>
    <FUNCLINE>261</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>panel.cpp</FILENAME>
      <LINE>201</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'Gui::ActiveWindow' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>SplashPane::update</FUNCTION>
    <DECORATED>?update@SplashPane@@UEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>panel.cpp</FILENAME>
      <LINE>205</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'Engine::Gamestate' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>SplashPane::update</FUNCTION>
    <DECORATED>?update@SplashPane@@UEAAXXZ</DECORATED>
    <FUNCLINE>178</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>settings.cpp</FILENAME>
      <LINE>12</LINE>
      <COLUMN>145</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'TCOD_fov_algorithm_t' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>Settings::{ctor}</FUNCTION>
    <DECORATED>??0Settings@@QEAA@HH@Z</DECORATED>
    <FUNCLINE>11</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>E:\Projects\Visual Studio\Libtcod Development\Epsilon\</FILEPATH>
      <FILENAME>settings.cpp</FILENAME>
      <LINE>12</LINE>
      <COLUMN>172</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>The enum type 'TCOD_renderer_t' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).</DESCRIPTION>
    <FUNCTION>Settings::{ctor}</FUNCTION>
    <DECORATED>??0Settings@@QEAA@HH@Z</DECORATED>
    <FUNCLINE>11</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>